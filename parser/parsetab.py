
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightLARROWleftNOTnonassocLELTEQUALSleftPLUSMINUSleftTIMESDIVIDEleftISVOIDleftTILDEleftATleftDOTAT CASE CLASS COLON COMMA DIVIDE DOT ELSE EQUALS ESAC FALSE FI IDENTIFIER IF IN INHERITS INTEGER ISVOID LARROW LBRACE LE LET LOOP LPAREN LT MINUS NEW NOT OF PLUS POOL RARROW RBRACE RPAREN SEMI STRING THEN TILDE TIMES TRUE TYPE WHILEprogram : classlist\n                classlist : class SEMI classlist \n                        | class SEMI\n                \n                class : CLASS type LBRACE featurelist RBRACE\n                \n                class : CLASS type INHERITS type LBRACE featurelist RBRACE\n                type : TYPEfeaturelist :featurelist : feature SEMI featurelistfeature : identifier COLON typefeature : identifier COLON type LARROW expformal : identifier COLON typeformallist : formal COMMA formallist\n                | formal \n                |\n                feature : identifier LPAREN formallist RPAREN COLON type LBRACE exp RBRACEexp : identifier LARROW expexplist : exp COMMA explist\n                |          exp \n                |\n                exp : exp DOT identifier LPAREN explist RPARENexp : exp AT type DOT identifier LPAREN explist RPARENexp : identifier LPAREN explist RPARENexp : IF exp THEN exp ELSE exp FIexp : WHILE exp LOOP exp POOLblock_exp_list : exp SEMI block_exp_list\n                | exp SEMIexp : LBRACE block_exp_list RBRACEbindinglist : binding COMMA bindinglist\n                | binding\n                binding : identifier COLON typebinding : identifier COLON type LARROW expexp : LET bindinglist IN expelementlist : element elementlist \n                | elementelement : identifier COLON type RARROW exp SEMIexp : CASE exp OF elementlist ESACexp : NEW typeexp : ISVOID expexp : exp PLUS expexp : exp MINUS expexp : exp TIMES expexp : exp DIVIDE expexp : TILDE expexp : exp LT expexp : exp LE expexp : exp EQUALS expexp : NOT expexp : LPAREN exp RPARENexp : identifieridentifier : IDENTIFIERexp : INTEGERexp : STRINGexp : TRUEexp : FALSE'
    
_lr_action_items = {'CLASS':([0,5,],[4,4,]),'$end':([1,2,5,8,],[0,-1,-3,-2,]),'SEMI':([3,7,12,14,16,22,31,32,33,44,45,46,47,66,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,116,118,121,122,128,130,131,],[5,-6,17,-50,-4,-9,-5,-49,-10,-51,-52,-53,-54,92,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-24,-36,-15,-20,-23,-21,132,]),'TYPE':([4,10,18,28,40,49,54,95,120,],[7,7,7,7,7,7,7,7,7,]),'LBRACE':([6,7,15,27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,75,89,90,92,93,97,99,100,115,117,123,129,],[9,-6,20,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,97,37,37,37,37,37,37,37,37,37,37,37,]),'INHERITS':([6,7,],[10,-6,]),'LARROW':([7,14,22,32,107,],[-6,-50,27,51,117,]),'COMMA':([7,14,25,32,44,45,46,47,48,68,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,105,107,116,118,122,125,128,130,],[-6,-50,30,-49,-51,-52,-53,-54,-11,94,-37,-38,-43,-47,-16,99,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-30,-24,-36,-20,-31,-23,-21,]),'RPAREN':([7,14,19,24,25,30,32,44,45,46,47,48,50,52,62,71,72,73,74,76,77,78,81,82,83,84,85,86,87,88,91,98,99,100,105,112,113,116,118,122,123,127,128,130,],[-6,-50,-14,29,-13,-14,-49,-51,-52,-53,-54,-11,-12,-19,88,-37,-38,-43,-47,-16,98,-18,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-19,-19,-32,-17,122,-24,-36,-20,-19,130,-23,-21,]),'DOT':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,80,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,53,-51,-52,-53,-54,53,53,53,53,53,-37,53,53,53,53,53,101,53,53,53,53,53,53,53,-48,-27,-22,53,53,53,53,-24,-36,-20,53,53,-23,-21,53,]),'AT':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,54,-51,-52,-53,-54,54,54,54,54,54,-37,54,54,54,54,54,54,54,54,54,54,54,54,-48,-27,-22,54,54,54,54,-24,-36,-20,54,54,-23,-21,54,]),'PLUS':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,55,-51,-52,-53,-54,55,55,55,55,55,-37,-38,-43,55,55,55,-39,-40,-41,-42,55,55,55,-48,-27,-22,55,55,55,55,-24,-36,-20,55,55,-23,-21,55,]),'MINUS':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,56,-51,-52,-53,-54,56,56,56,56,56,-37,-38,-43,56,56,56,-39,-40,-41,-42,56,56,56,-48,-27,-22,56,56,56,56,-24,-36,-20,56,56,-23,-21,56,]),'TIMES':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,57,-51,-52,-53,-54,57,57,57,57,57,-37,-38,-43,57,57,57,57,57,-41,-42,57,57,57,-48,-27,-22,57,57,57,57,-24,-36,-20,57,57,-23,-21,57,]),'DIVIDE':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,58,-51,-52,-53,-54,58,58,58,58,58,-37,-38,-43,58,58,58,58,58,-41,-42,58,58,58,-48,-27,-22,58,58,58,58,-24,-36,-20,58,58,-23,-21,58,]),'LT':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,59,-51,-52,-53,-54,59,59,59,59,59,-37,-38,-43,59,59,59,-39,-40,-41,-42,None,None,None,-48,-27,-22,59,59,59,59,-24,-36,-20,59,59,-23,-21,59,]),'LE':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,60,-51,-52,-53,-54,60,60,60,60,60,-37,-38,-43,60,60,60,-39,-40,-41,-42,None,None,None,-48,-27,-22,60,60,60,60,-24,-36,-20,60,60,-23,-21,60,]),'EQUALS':([7,14,32,33,44,45,46,47,62,63,64,66,70,71,72,73,74,76,78,81,82,83,84,85,86,87,88,91,98,102,103,105,111,116,118,122,124,125,128,130,131,],[-6,-50,-49,61,-51,-52,-53,-54,61,61,61,61,61,-37,-38,-43,61,61,61,-39,-40,-41,-42,None,None,None,-48,-27,-22,61,61,61,61,-24,-36,-20,61,61,-23,-21,61,]),'THEN':([7,14,32,44,45,46,47,63,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,116,118,122,128,130,],[-6,-50,-49,-51,-52,-53,-54,89,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-24,-36,-20,-23,-21,]),'LOOP':([7,14,32,44,45,46,47,64,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,116,118,122,128,130,],[-6,-50,-49,-51,-52,-53,-54,90,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-24,-36,-20,-23,-21,]),'OF':([7,14,32,44,45,46,47,70,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,116,118,122,128,130,],[-6,-50,-49,-51,-52,-53,-54,96,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-24,-36,-20,-23,-21,]),'ELSE':([7,14,32,44,45,46,47,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,102,105,116,118,122,128,130,],[-6,-50,-49,-51,-52,-53,-54,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,115,-32,-24,-36,-20,-23,-21,]),'POOL':([7,14,32,44,45,46,47,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,103,105,116,118,122,128,130,],[-6,-50,-49,-51,-52,-53,-54,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,116,-32,-24,-36,-20,-23,-21,]),'RBRACE':([7,9,11,14,17,20,21,26,32,44,45,46,47,65,71,72,73,74,76,81,82,83,84,85,86,87,88,91,92,98,104,105,111,116,118,122,128,130,],[-6,-7,16,-50,-7,-7,-8,31,-49,-51,-52,-53,-54,91,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-26,-22,-25,-32,121,-24,-36,-20,-23,-21,]),'FI':([7,14,32,44,45,46,47,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,116,118,122,124,128,130,],[-6,-50,-49,-51,-52,-53,-54,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-24,-36,-20,128,-23,-21,]),'IN':([7,14,32,44,45,46,47,67,68,71,72,73,74,76,81,82,83,84,85,86,87,88,91,98,105,106,107,116,118,122,125,128,130,],[-6,-50,-49,-51,-52,-53,-54,93,-29,-37,-38,-43,-47,-16,-39,-40,-41,-42,-44,-45,-46,-48,-27,-22,-32,-28,-30,-24,-36,-20,-31,-23,-21,]),'RARROW':([7,126,],[-6,129,]),'IDENTIFIER':([9,17,19,20,27,30,34,35,36,37,38,39,41,42,43,51,52,53,55,56,57,58,59,60,61,89,90,92,93,94,96,97,99,100,101,109,115,117,123,129,132,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-35,]),'COLON':([13,14,23,29,69,110,],[18,-50,28,49,95,120,]),'LPAREN':([13,14,27,32,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,79,89,90,92,93,97,99,100,114,115,117,123,129,],[19,-50,34,52,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,100,34,34,34,34,34,34,34,123,34,34,34,34,]),'IF':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'WHILE':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'LET':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CASE':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NEW':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ISVOID':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'TILDE':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'NOT':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'INTEGER':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'STRING':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'TRUE':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'FALSE':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ESAC':([108,109,119,132,],[118,-34,-33,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classlist':([0,5,],[2,8,]),'class':([0,5,],[3,3,]),'type':([4,10,18,28,40,49,54,95,120,],[6,15,22,48,71,75,80,107,126,]),'featurelist':([9,17,20,],[11,21,26,]),'feature':([9,17,20,],[12,12,12,]),'identifier':([9,17,19,20,27,30,34,35,36,37,38,39,41,42,43,51,52,53,55,56,57,58,59,60,61,89,90,92,93,94,96,97,99,100,101,109,115,117,123,129,],[13,13,23,13,32,23,32,32,32,32,69,32,32,32,32,32,32,79,32,32,32,32,32,32,32,32,32,32,32,69,110,32,32,32,114,110,32,32,32,32,]),'formallist':([19,30,],[24,50,]),'formal':([19,30,],[25,25,]),'exp':([27,34,35,36,37,39,41,42,43,51,52,55,56,57,58,59,60,61,89,90,92,93,97,99,100,115,117,123,129,],[33,62,63,64,66,70,72,73,74,76,78,81,82,83,84,85,86,87,102,103,66,105,111,78,78,124,125,78,131,]),'block_exp_list':([37,92,],[65,104,]),'bindinglist':([38,94,],[67,106,]),'binding':([38,94,],[68,68,]),'explist':([52,99,100,123,],[77,112,113,127,]),'elementlist':([96,109,],[108,119,]),'element':([96,109,],[109,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classlist','program',1,'p_program_classlist','parser.py',66),
  ('classlist -> class SEMI classlist','classlist',3,'p_classlist','parser.py',70),
  ('classlist -> class SEMI','classlist',2,'p_classlist','parser.py',71),
  ('class -> CLASS type LBRACE featurelist RBRACE','class',5,'p_class_noinherit','parser.py',81),
  ('class -> CLASS type INHERITS type LBRACE featurelist RBRACE','class',7,'p_class_inherit','parser.py',87),
  ('type -> TYPE','type',1,'p_type','parser.py',92),
  ('featurelist -> <empty>','featurelist',0,'p_featurelist_none','parser.py',98),
  ('featurelist -> feature SEMI featurelist','featurelist',3,'p_featurelist_some','parser.py',101),
  ('feature -> identifier COLON type','feature',3,'p_feature_attribute_no_init','parser.py',105),
  ('feature -> identifier COLON type LARROW exp','feature',5,'p_feature_attribute_init','parser.py',108),
  ('formal -> identifier COLON type','formal',3,'p_formal','parser.py',112),
  ('formallist -> formal COMMA formallist','formallist',3,'p_formallist','parser.py',116),
  ('formallist -> formal','formallist',1,'p_formallist','parser.py',117),
  ('formallist -> <empty>','formallist',0,'p_formallist','parser.py',118),
  ('feature -> identifier LPAREN formallist RPAREN COLON type LBRACE exp RBRACE','feature',9,'p_feature_method','parser.py',127),
  ('exp -> identifier LARROW exp','exp',3,'p_assign','parser.py',131),
  ('explist -> exp COMMA explist','explist',3,'p_explist','parser.py',136),
  ('explist -> exp','explist',1,'p_explist','parser.py',137),
  ('explist -> <empty>','explist',0,'p_explist','parser.py',138),
  ('exp -> exp DOT identifier LPAREN explist RPAREN','exp',6,'p_dynamic_dispatch','parser.py',148),
  ('exp -> exp AT type DOT identifier LPAREN explist RPAREN','exp',8,'p_static_dispatch','parser.py',151),
  ('exp -> identifier LPAREN explist RPAREN','exp',4,'p_self_dispatch','parser.py',154),
  ('exp -> IF exp THEN exp ELSE exp FI','exp',7,'p_if','parser.py',158),
  ('exp -> WHILE exp LOOP exp POOL','exp',5,'p_while','parser.py',161),
  ('block_exp_list -> exp SEMI block_exp_list','block_exp_list',3,'p_block_explist','parser.py',165),
  ('block_exp_list -> exp SEMI','block_exp_list',2,'p_block_explist','parser.py',166),
  ('exp -> LBRACE block_exp_list RBRACE','exp',3,'p_block','parser.py',173),
  ('bindinglist -> binding COMMA bindinglist','bindinglist',3,'p_bindinglist','parser.py',178),
  ('bindinglist -> binding','bindinglist',1,'p_bindinglist','parser.py',179),
  ('binding -> identifier COLON type','binding',3,'p_binding_no_init','parser.py',186),
  ('binding -> identifier COLON type LARROW exp','binding',5,'p_binding_init','parser.py',189),
  ('exp -> LET bindinglist IN exp','exp',4,'p_let','parser.py',193),
  ('elementlist -> element elementlist','elementlist',2,'p_case_element_list','parser.py',197),
  ('elementlist -> element','elementlist',1,'p_case_element_list','parser.py',198),
  ('element -> identifier COLON type RARROW exp SEMI','element',6,'p_case_element','parser.py',205),
  ('exp -> CASE exp OF elementlist ESAC','exp',5,'p_case','parser.py',208),
  ('exp -> NEW type','exp',2,'p_new','parser.py',212),
  ('exp -> ISVOID exp','exp',2,'p_isvoid','parser.py',215),
  ('exp -> exp PLUS exp','exp',3,'p_exp_plus','parser.py',219),
  ('exp -> exp MINUS exp','exp',3,'p_exp_minus','parser.py',222),
  ('exp -> exp TIMES exp','exp',3,'p_exp_times','parser.py',225),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_divide','parser.py',228),
  ('exp -> TILDE exp','exp',2,'p_negate','parser.py',231),
  ('exp -> exp LT exp','exp',3,'p_lt','parser.py',235),
  ('exp -> exp LE exp','exp',3,'p_le','parser.py',238),
  ('exp -> exp EQUALS exp','exp',3,'p_eq','parser.py',241),
  ('exp -> NOT exp','exp',2,'p_not','parser.py',244),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_paren','parser.py',249),
  ('exp -> identifier','exp',1,'p_exp_identifier','parser.py',255),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',258),
  ('exp -> INTEGER','exp',1,'p_exp_integer','parser.py',261),
  ('exp -> STRING','exp',1,'p_exp_string','parser.py',264),
  ('exp -> TRUE','exp',1,'p_exp_true','parser.py',267),
  ('exp -> FALSE','exp',1,'p_exp_false','parser.py',270),
]
