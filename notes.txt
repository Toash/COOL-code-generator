Cant have two memory addresses in a single instruction
- So what is normally done for references to object fields is putting the objects memory address
    in a register, and use that register plus an offset.

x86 handles returning differently- 
    for COOL_ASM:
        Right now we push the return address,
        then at the end we read the top of stack and store into ra. 
        return jumps to address in ra
        deallocate stack frame
    but for x86:
        we should pop return address from caller.
        callee should maintain stack integrity
            when callee is finished, the last statement should pop the return address from stack and jump to it.
            (stack should be preserved!)

        caller should maintain stack integrity
            Add to rsp after finishing procedure (i.e remove args and receiver object that was pushed earlier)

Transfer of control- 
    Jumps   
    Returns


jump to indirect address: jmp *reg 

Instructions that affect the condition code (flags):
    Arithmetic:
        addq, subq, andq, orq

    Others:
        cmpq (dst - src)
        testq (dst & src)


Matter of convention (not required but should be implemented):
    parameter passing
    stack frame organization
    Register usage

Register usage
    function result - %rax
    
    first six arguments - %rdi, %rsi, %rdx, %rcx, %r8, %r9
        For Java / C++, "this" pointer is in first arguments
        Should do the same for COOL programs.
    stack pointer - %rsp, value must be 8 byte aligned always, 16 byte aligned when calling a function.
    
    frame pointer (optional) - %rbp
    
    register saving conventions - a called function must preserve (save / restore if using) these registers:
        %rbx, %rbp, %r12-%r15

    called function returns with:
        movq %rbp, %rsp
        popq %rbp


Type tags used to determine types when doing equality comparisons.